#!/bin/bash -e

dims() {
	if [ $# -gt "1" ]
	then
		echo "Error" 1>&2
		return 1
	elif [ $# = "1" ] && [ ! -r $1 ]
	then
		echo "Error, file is unreadable" 1>&2
		return 1
	else
		rows=$(wc -l $1)
		firstline=$(head -n 1 $1)
		cols=$(echo $firstline | wc -w ) # counts the number of words in the first line
		rows=$(echo $rows | cut -f 1 -d " ")  # cut cuts the first field (-f 1) from a list of fields delimited by the string " " (-d)
		printf "$rows $cols\n"
		return 0
	fi		 		
}

transpose() { 
	firstline=$(head -n 1 $1)
	cols=$(echo $firstline | wc -w )
	rows=$(wc -l $1)
	rows=$(echo $rows | cut -f 1 -d " ")
	if [ $# -gt "1" ]
	then
		echo "Error" 1>&2
		return 1
	elif [ $# = "1" ] && [ ! -r $1 ]
	then
		echo "Error, file is unreadable" 1>&2
		return 1
	else
		for((i = 1; i <= $cols; i++))
		do
			eachcol=$(cut -f $i $1)
			for((j = 1; j <= $rows; j++))
			do
				read num
				if [ $j = $rows ]
				then
					printf "%d" $num
				else
					printf "%d\t" $num
				fi
			done <<< "$eachcol"
			printf "\n"
		done
		return 0
	fi
}

mean() {
	rows=$(wc -l $1)
	rows=$(echo $rows | cut -f 1 -d " ")  # cut cuts the first field (-f 1) from a list of fields delimited by the string " " (-d)
	firstline=$(head -n 1 $1)
	cols=$(echo $firstline | wc -w )
	
	if [ $# -gt "1" ]
	then
		echo "Error 1" 1>&2
		return 1
	elif [ $# = "1" ] && [ ! -r $1 ]
	then
		echo "Error, file is unreadable" 1>&2
		return 1
	else
		sum=0
		for((i = 1; i <= $cols; i++))
		do
			eachcol=$(cut -f $i $1)
			for((j = 1; j <= $rows; j++))
			do
				read num
				sum=$((sum+$num))
			done <<< "$eachcol"
			sum=$(( ($sum + ($rows/2)*( ($sum>0)*2-1))/$rows ))
			if [ $i = $cols ]
			then
				printf "%d\n" $sum
			else
				printf "%d\t" $sum
			fi
			sum=0
		done
		return 0
	fi
}

add() {
	rowsm1=$(wc -l $1)
	rowsm1=$(echo $rowsm1 | cut -f 1 -d " ")  # cut cuts the first field (-f 1) from a list of fields delimited by the string " " (-d)
	#echo "This is m1 rows: $rowsm1"

	firstlinem1=$(head -n 1 $1)
	colsm1=$(echo $firstlinem1 | wc -w )
	#echo "This is m1 cols: $colsm1"

	rowsm2=$(wc -l $2)
	rowsm2=$(echo $rowsm2 | cut -f 1 -d " ")  # cut cuts the first field (-f 1) from a list of fields delimited by the string " " (-d)
	#echo "This is m2 rows: $rowsm2"


	firstlinem2=$(head -n 1 $2)
	colsm2=$(echo $firstlinem2 | wc -w )
	#echo "This is m2 cols: $colsm1"


	if [ $# != "2" ]
	then
		echo "Error 1" 1>&2
		return 1
	elif [[ $# = "2" && ( ! -r $1 || ! -r $2 ) ]]
	then
		echo "Error, file is unreadable" 1>&2
		return 1	
	elif [ $rowsm1 -ne $rowsm2 ] || [ $colsm1 -ne $colsm2 ]
	then
		echo "Error, matrices are not the same size!" 1>&2
		return 1
	else
		numm1=0
		numm2=0
		sum=0
		paste -d '\n' $1 $2 | while read f1 && read f2
		do
			#echo "f1: $f1"
			#echo "f2: $f2"
			for((i = 1; i <= $colsm1; i++))
			do
				numm1=$(echo "$f1" | cut -f $i)
				#echo "numm1: $numm1"
				numm2=$(echo "$f2" | cut -f $i)
				#echo "numm2: $numm2"
				sum=$(($numm1+$numm2))
				if [ $i = $colsm1 ]
				then
					printf "%d" $sum
				else
					printf "%d\t" $sum
				fi 	
			done
			printf "\n"
			numm1=0
			numm2=0
			sum=0
		done
		return 0
	fi
}

multiply() {
	rowsm1=$(wc -l $1)
	rowsm1=$(echo $rowsm1 | cut -f 1 -d " ")  # cut cuts the first field (-f 1) from a list of fields delimited by the string " " (-d)
	#echo "This is m1 rows: $rowsm1"

	firstlinem1=$(head -n 1 $1)
	colsm1=$(echo $firstlinem1 | wc -w )
	#echo "This is m1 cols: $colsm1"

	rowsm2=$(wc -l $2)
	rowsm2=$(echo $rowsm2 | cut -f 1 -d " ")  # cut cuts the first field (-f 1) from a list of fields delimited by the string " " (-d)
	#echo "This is m2 rows: $rowsm2"


	firstlinem2=$(head -n 1 $2)
	colsm2=$(echo $firstlinem2 | wc -w )
	#echo "This is m2 cols: $colsm1"

	if [ $# != "2" ]
	then 
		echo "Error 1" 1>&2
		return 1
	elif [[ $# = "2" && ( ! -r $1 || ! -r $2 ) ]]
	then
		echo "Error, file is unreadable" 1>&2
		return 1		 	
	elif [ $colsm1 != $rowsm2 ]
	then
		echo "Error, the column of the first matrix is not equal to the row of the second matrix." 1>&2
		return 1
	else 
		numm1=0
		numm2=0
		multiply=0
		#paste -d '\n' $1 | while read f1 # reads in each row of m1, $f1 is the first row of m1
		#do
		#	echo "f1: $f1"
		#	for((i = 1; i <= $colsm1; i++)) #iterate through each element of the row	
		#	do
		#		numm1=$(echo "$f1" | cut -f $i)
		#		echo "numm1: $numm1"
		#		for((j = 1; j <= $colsm2; j++)) #iterate through each element in the m2 column
		#		do
		#			eachcol=$(cut -f $j $2)
		#			for((k = 1; k <= $rowsm2; k++))
		#			do
		#				read num
		#				if [ $i = $j ]
		#				then
		#					multiply=$(($numm1*$num))
		#				fi
		#			done <<< "$eachcol"

					#echo "eachcol: $eachcol"
					#if [ $i = $j ]
					#then
					#	multiply=$((numm1 * eachcol))
					#else
					#	echo "hello"
					#fi
					#echo "multiply: $multiply"
		#		done
		#		echo "mult: $multiply"
		#	done
		#done
		transpose $2 > "tempfile3"
				
		while read -u 3 left && read -u 4 right
		do
			
		done 3<"$1" 4<"tempfile3"
		return 0
	fi
}


datafilepath="datafile$$"
if [ "$#" = "0" ]
then 
	echo "Error, no arguments were passed" 1>&2
	exit 1
elif [ $1 = "add" ] || [ $1 = "multiply" ]
then
	if [ $# = "3" ]
	then
		$1 $2 $3
	else
		echo "Error" 1>&2
		exit 1
	fi
elif [ $1 = "dims" ] || [ $1 = "transpose" ] || [ $1 = "mean" ]
then
	if [ $# = "2" ]
	then
		$1 $2
	elif [ $# = "1" ]
	then
		cat > "$datafilepath"
		$1 "$datafilepath"
	else
		echo "Error" 1>&2
		exit 1
	fi
else
	echo "Error, function does not exist: $1" 1>&2
	exit 1
fi	
